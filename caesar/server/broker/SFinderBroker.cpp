/*----- PROTECTED REGION ID(SFinderBroker.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        SFinderBroker.cpp
//
// description : C++ source for the SFinderBroker class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               SFinderBroker are implemented in this file.
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <SFinderBroker.h>
#include <SFinderBrokerClass.h>

#include <WorkerStateCallBack.h>

//Caesar headers
#include <Img.h>
#include <BkgData.h>
#include <Contour.h>
#include <Logger.h>
#include <Serializer.h>
#include <WorkerManager.h>
using namespace Caesar;

//## Standard headers
#include <iostream>
#include <string>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <ctime>
#include <stdexcept>
#include <unistd.h>
#include <getopt.h>
#include <math.h>
#include <time.h>

#include <map>
#include <vector>
#include <thread>
#include <memory>
#include <functional>
#include <chrono>
#include <regex>
#include <exception>

using namespace std;

/*----- PROTECTED REGION END -----*/	//	SFinderBroker.cpp

/**
 *  SFinderBroker class description:
 *    
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name     |  Method name
//================================================================
//  State            |  Inherited (no method)
//  Status           |  Inherited (no method)
//  RegisterWorker   |  register_worker
//  ListWorkers      |  list_workers
//  ListFreeWorkers  |  list_free_workers
//  ListBusyWorkers  |  list_busy_workers
//  PingWorker       |  ping_worker
//================================================================

//================================================================
//  Attributes managed is:
//================================================================
//================================================================

namespace SFinderBroker_ns
{
/*----- PROTECTED REGION ID(SFinderBroker::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	SFinderBroker::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : SFinderBroker::SFinderBroker()
 *	Description : Constructors for a Tango device
 *                implementing the classSFinderBroker
 */
//--------------------------------------------------------
SFinderBroker::SFinderBroker(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(SFinderBroker::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	SFinderBroker::constructor_1
}
//--------------------------------------------------------
SFinderBroker::SFinderBroker(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(SFinderBroker::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	SFinderBroker::constructor_2
}
//--------------------------------------------------------
SFinderBroker::SFinderBroker(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(SFinderBroker::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	SFinderBroker::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : SFinderBroker::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void SFinderBroker::delete_device()
{
	DEBUG_STREAM << "SFinderBroker::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(SFinderBroker::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	//## Delete mutex
	if(m_mutex) {
  	DEBUG_LOG("Deleting mutex...");
    delete m_mutex;
    m_mutex= 0;
  }

	if(m_workerManager){
		DEBUG_LOG("Deleting worker manager...");
		delete m_workerManager;
		m_workerManager= 0;
	}

	if(m_workerStateCallBack){
		DEBUG_LOG("Deleting worker state callback...");
		delete m_workerStateCallBack;
		m_workerStateCallBack= 0;
	}

	/*----- PROTECTED REGION END -----*/	//	SFinderBroker::delete_device
}

//--------------------------------------------------------
/**
 *	Method      : SFinderBroker::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void SFinderBroker::init_device()
{
	DEBUG_STREAM << "SFinderBroker::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(SFinderBroker::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	
	/*----- PROTECTED REGION END -----*/	//	SFinderBroker::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	/*----- PROTECTED REGION ID(SFinderBroker::init_device) ENABLED START -----*/
	
	//	Initialize device

	//## Init mutex
  DEBUG_LOG("Init mutex...");
  m_mutex= 0;
  m_mutex = new omni_mutex();

	//## Init worker state callback
	DEBUG_LOG("Init worker state callback ...");
	m_workerStateCallBack= 0;
	m_workerStateCallBack= new WorkerStateCallBack(this);

	DEBUG_LOG("Init worker manager ...");
	m_workerManager= 0;
	m_workerManager= new WorkerManager();

	/*----- PROTECTED REGION END -----*/	//	SFinderBroker::init_device
}

//--------------------------------------------------------
/**
 *	Method      : SFinderBroker::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void SFinderBroker::get_device_property()
{
	/*----- PROTECTED REGION ID(SFinderBroker::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	
	/*----- PROTECTED REGION END -----*/	//	SFinderBroker::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("federatedBrokers"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on SFinderBrokerClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		SFinderBrokerClass	*ds_class =
			(static_cast<SFinderBrokerClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize federatedBrokers from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  federatedBrokers;
		else {
			//	Try to initialize federatedBrokers from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  federatedBrokers;
		}
		//	And try to extract federatedBrokers value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  federatedBrokers;

	}

	/*----- PROTECTED REGION ID(SFinderBroker::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	
	/*----- PROTECTED REGION END -----*/	//	SFinderBroker::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : SFinderBroker::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void SFinderBroker::always_executed_hook()
{
	DEBUG_STREAM << "SFinderBroker::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(SFinderBroker::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	
	/*----- PROTECTED REGION END -----*/	//	SFinderBroker::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : SFinderBroker::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void SFinderBroker::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "SFinderBroker::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(SFinderBroker::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	SFinderBroker::read_attr_hardware
}


//--------------------------------------------------------
/**
 *	Method      : SFinderBroker::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void SFinderBroker::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(SFinderBroker::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	SFinderBroker::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command RegisterWorker related method
 *	Description: Register device with input name in the list of workers
 *
 *	@param argin Worker device name to be registered
 *	@returns 
 */
//--------------------------------------------------------
Tango::DevVarLongStringArray *SFinderBroker::register_worker(Tango::DevString argin)
{
	Tango::DevVarLongStringArray *argout;
	DEBUG_STREAM << "SFinderBroker::RegisterWorker()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(SFinderBroker::register_worker) ENABLED START -----*/
	
	//	Add your own code
	std::string reply= "Request executed with success";
	long int ack= 0;
	argout= new Tango::DevVarLongStringArray;
	argout->lvalue.length(1);
	argout->svalue.length(1);

	//Get worker name argument
	if(strcmp(argin,"")==0){
		WARN_LOG("Missing worker name argument!");
		ack= -1;
		reply= "Missing worker name argument!";
		argout->lvalue[0]= ack;
		argout->svalue[0] = CORBA::string_dup(reply.c_str());
		return argout;
	}
	std::string worker_name= std::string(argin);


	
	//Register worker in list
	INFO_LOG("Registering worker "<<worker_name<<" in broker...");
	if(m_workerManager->AddWorker(worker_name)<0){
		WARN_LOG("Worker registration failed!");
		ack= -1;
		reply= "Worker registration failed!";
		argout->lvalue[0]= ack;
		argout->svalue[0] = CORBA::string_dup(reply.c_str());
		return argout;
	}


	//Return reply
	argout->lvalue[0]= ack;
	argout->svalue[0] = CORBA::string_dup(reply.c_str());
	
	/*----- PROTECTED REGION END -----*/	//	SFinderBroker::register_worker
	return argout;
}
//--------------------------------------------------------
/**
 *	Command ListWorkers related method
 *	Description: List all the workers registered for this broker
 *
 *	@returns List of worker devices registered
 */
//--------------------------------------------------------
Tango::DevVarStringArray *SFinderBroker::list_workers()
{
	Tango::DevVarStringArray *argout;
	DEBUG_STREAM << "SFinderBroker::ListWorkers()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(SFinderBroker::list_workers) ENABLED START -----*/
	
	//	Add your own code
	//Get worker names
	std::vector<std::string> worker_names;
	m_workerManager->GetWorkerNames(worker_names);

	//Reply	
	argout= new Tango::DevVarStringArray;
	argout->length(worker_names.size());
	for(unsigned int i=0;i<worker_names.size();i++){
		(*argout)[i]= CORBA::string_dup(worker_names[i].c_str());
	}
	
	/*----- PROTECTED REGION END -----*/	//	SFinderBroker::list_workers
	return argout;
}
//--------------------------------------------------------
/**
 *	Command ListFreeWorkers related method
 *	Description: List the free workers among those registered for this broker
 *
 *	@returns List of free workers
 */
//--------------------------------------------------------
Tango::DevVarStringArray *SFinderBroker::list_free_workers()
{
	Tango::DevVarStringArray *argout;
	DEBUG_STREAM << "SFinderBroker::ListFreeWorkers()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(SFinderBroker::list_free_workers) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	SFinderBroker::list_free_workers
	return argout;
}
//--------------------------------------------------------
/**
 *	Command ListBusyWorkers related method
 *	Description: List the busy worker devices among the registered ones
 *
 *	@returns List busy workers
 */
//--------------------------------------------------------
Tango::DevVarStringArray *SFinderBroker::list_busy_workers()
{
	Tango::DevVarStringArray *argout;
	DEBUG_STREAM << "SFinderBroker::ListBusyWorkers()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(SFinderBroker::list_busy_workers) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	SFinderBroker::list_busy_workers
	return argout;
}
//--------------------------------------------------------
/**
 *	Command PingWorker related method
 *	Description: Ping a given worker
 *
 *	@param argin Worker name
 */
//--------------------------------------------------------
void SFinderBroker::ping_worker(Tango::DevString argin)
{
	DEBUG_STREAM << "SFinderBroker::PingWorker()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(SFinderBroker::ping_worker) ENABLED START -----*/
	
	//	Add your own code
	//Connect to device
	std::string worker_name= std::string(argin);
	 Tango::DeviceProxy* device_proxy= 0;
	try {
		device_proxy= new Tango::DeviceProxy(worker_name);
	}
	catch(Tango::DevFailed& e){
		WARN_LOG("Cannot connect to worker device "<<worker_name<<"...");
		return;
	}

	//Get current state
	Tango::DevState current_state= Tango::UNKNOWN;
	try {
		current_state= device_proxy->state();
		INFO_LOG("Current worker state: "<<current_state<<"...");
	}
	catch(Tango::DevFailed& e){
		Tango::Except::print_exception(e);
		WARN_LOG("Cannot get worker device "<<device_name<<" state information...");
		return;
	}

	/*----- PROTECTED REGION END -----*/	//	SFinderBroker::ping_worker
}
//--------------------------------------------------------
/**
 *	Method      : SFinderBroker::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void SFinderBroker::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(SFinderBroker::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	SFinderBroker::add_dynamic_commands
}

/*----- PROTECTED REGION ID(SFinderBroker::namespace_ending) ENABLED START -----*/

//	Additional Methods

/*----- PROTECTED REGION END -----*/	//	SFinderBroker::namespace_ending
} //	namespace
