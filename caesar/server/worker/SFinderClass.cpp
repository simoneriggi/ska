/*----- PROTECTED REGION ID(SFinderClass.cpp) ENABLED START -----*/
static const char *RcsId      = "$Id:  $";
static const char *TagName    = "$Name:  $";
static const char *CvsPath    = "$Source:  $";
static const char *SvnPath    = "$HeadURL:  $";
static const char *HttpServer = "http://www.esrf.eu/computing/cs/tango/tango_doc/ds_doc/";
//=============================================================================
//
// file :        SFinderClass.cpp
//
// description : C++ source for the SFinderClass.
//               A singleton class derived from DeviceClass.
//               It implements the command and attribute list
//               and all properties and methods required
//               by the SFinder once per process.
//
// project :     Source finder worker
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <SFinderClass.h>

/*----- PROTECTED REGION END -----*/	//	SFinderClass.cpp

//-------------------------------------------------------------------
/**
 *	Create SFinderClass singleton and
 *	return it in a C function for Python usage
 */
//-------------------------------------------------------------------
extern "C" {
#ifdef _TG_WINDOWS_

__declspec(dllexport)

#endif

	Tango::DeviceClass *_create_SFinder_class(const char *name) {
		return SFinder_ns::SFinderClass::init(name);
	}
}

namespace SFinder_ns
{
//===================================================================
//	Initialize pointer for singleton pattern
//===================================================================
SFinderClass *SFinderClass::_instance = NULL;

//--------------------------------------------------------
/**
 * method : 		SFinderClass::SFinderClass(string &s)
 * description : 	constructor for the SFinderClass
 *
 * @param s	The class name
 */
//--------------------------------------------------------
SFinderClass::SFinderClass(string &s):Tango::DeviceClass(s)
{
	cout2 << "Entering SFinderClass constructor" << endl;
	set_default_property();
	write_class_property();

	/*----- PROTECTED REGION ID(SFinderClass::constructor) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SFinderClass::constructor

	cout2 << "Leaving SFinderClass constructor" << endl;
}

//--------------------------------------------------------
/**
 * method : 		SFinderClass::~SFinderClass()
 * description : 	destructor for the SFinderClass
 */
//--------------------------------------------------------
SFinderClass::~SFinderClass()
{
	/*----- PROTECTED REGION ID(SFinderClass::destructor) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SFinderClass::destructor

	_instance = NULL;
}


//--------------------------------------------------------
/**
 * method : 		SFinderClass::init
 * description : 	Create the object if not already done.
 *                  Otherwise, just return a pointer to the object
 *
 * @param	name	The class name
 */
//--------------------------------------------------------
SFinderClass *SFinderClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new SFinderClass(s);
		}
		catch (bad_alloc &)
		{
			throw;
		}
	}
	return _instance;
}

//--------------------------------------------------------
/**
 * method : 		SFinderClass::instance
 * description : 	Check if object already created,
 *                  and return a pointer to the object
 */
//--------------------------------------------------------
SFinderClass *SFinderClass::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}



//===================================================================
//	Command execution method calls
//===================================================================
//--------------------------------------------------------
/**
 * method : 		ExtractSourcesClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ExtractSourcesClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "ExtractSourcesClass::execute(): arrived" << endl;
	const Tango::DevVarLongStringArray *argin;
	extract(in_any, argin);
	return insert((static_cast<SFinder *>(device))->extract_sources(argin));
}


//===================================================================
//	Properties management
//===================================================================
//--------------------------------------------------------
/**
 *	Method      : SFinderClass::get_class_property()
 *	Description : Get the class property for specified name.
 */
//--------------------------------------------------------
Tango::DbDatum SFinderClass::get_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_prop.size() ; i++)
		if (cl_prop[i].name == prop_name)
			return cl_prop[i];
	//	if not found, returns  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : SFinderClass::get_default_device_property()
 *	Description : Return the default value for device property.
 */
//--------------------------------------------------------
Tango::DbDatum SFinderClass::get_default_device_property(string &prop_name)
{
	for (unsigned int i=0 ; i<dev_def_prop.size() ; i++)
		if (dev_def_prop[i].name == prop_name)
			return dev_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : SFinderClass::get_default_class_property()
 *	Description : Return the default value for class property.
 */
//--------------------------------------------------------
Tango::DbDatum SFinderClass::get_default_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_def_prop.size() ; i++)
		if (cl_def_prop[i].name == prop_name)
			return cl_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}


//--------------------------------------------------------
/**
 *	Method      : SFinderClass::set_default_property()
 *	Description : Set default property (class and device) for wizard.
 *                For each property, add to wizard property name and description.
 *                If default value has been set, add it to wizard property and
 *                store it in a DbDatum.
 */
//--------------------------------------------------------
void SFinderClass::set_default_property()
{
	string	prop_name;
	string	prop_desc;
	string	prop_def;
	vector<string>	vect_data;

	//	Set Default Class Properties

	//	Set Default device Properties
	prop_name = "useLocalBkg_default";
	prop_desc = "Default value for useLocalBkg property";
	prop_def  = "true";
	vect_data.clear();
	vect_data.push_back("true");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "use2ndPassInLocalBkg_default";
	prop_desc = "Use 2nd pass when computing the local bkg";
	prop_def  = "true";
	vect_data.clear();
	vect_data.push_back("true");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "skipNegativePixels_default";
	prop_desc = "Default flag to skip/keep negative pixels when computing \nimage stats";
	prop_def  = "false";
	vect_data.clear();
	vect_data.push_back("false");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "skipOutliersInLocalBkg_default";
	prop_desc = "Default value of flag to enable/disable skipping outliers in local\nbkg computation";
	prop_def  = "true";
	vect_data.clear();
	vect_data.push_back("true");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "localBkgMethod_default";
	prop_desc = "Default value of method to be used to compute local bkg \n(1=Grid, 2=Superpixel)";
	prop_def  = "1";
	vect_data.clear();
	vect_data.push_back("1");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "bkgEstimator_default";
	prop_desc = "Default bkg estimator \n(1=Mean, 2=Median, 3=BiWeight, 4=MedianClipped)";
	prop_def  = "2";
	vect_data.clear();
	vect_data.push_back("2");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "useBeamInfoInBkg_default";
	prop_desc = "Default flag for using beam information in bkg computation";
	prop_def  = "true";
	vect_data.clear();
	vect_data.push_back("true");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "localBkgBoxSizeX_default";
	prop_desc = "Default box size X used for local bkg computation. \nIf beam information is used, this corresponds to a\nmultiple of beam size (e.g. x10, 20, 30 typically), otherwise it \ncorresponds to a fraction of image size.";
	prop_def  = "10";
	vect_data.clear();
	vect_data.push_back("10");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "localBkgBoxSizeY_default";
	prop_desc = "Default box size Y used for local bkg computation. \nIf beam information is used, this corresponds to a\nmultiple of beam size (e.g. x10, 20, 30 typically), otherwise it \ncorresponds to a fraction of image size.";
	prop_def  = "10";
	vect_data.clear();
	vect_data.push_back("10");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "localBkgGridStepSizeX_default";
	prop_desc = "Default grid step size X used in local bkg computation. \nThis corresponds to a fraction of the box size X (e.g. 0.2, 0.5 \nare typical values)";
	prop_def  = "0.2";
	vect_data.clear();
	vect_data.push_back("0.2");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "localBkgGridStepSizeY_default";
	prop_desc = "Default grid step size X used in local bkg computation. \nThis corresponds to a fraction of the box size X (e.g. 0.2, 0.5 \nare typical values)";
	prop_def  = "0.2";
	vect_data.clear();
	vect_data.push_back("0.2");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "seedThr_default";
	prop_desc = "Default seed threshold (in number of sigmas above significance \nlevel) to be used in source finding (flood-fill).";
	prop_def  = "5";
	vect_data.clear();
	vect_data.push_back("5");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "mergeThr_default";
	prop_desc = "Default merge threshold (in number of sigmas above significance \nlevel) to be used in source finding (flood-fill).";
	prop_def  = "2.6";
	vect_data.clear();
	vect_data.push_back("2.6");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "minNPix_default";
	prop_desc = "Default minimum number of pixels in source fnding (blob size in\nflood-fill).";
	prop_def  = "5";
	vect_data.clear();
	vect_data.push_back("5");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "mergeBelowSeed_default";
	prop_desc = "Default flag value to aggregate only pixels below seed \nthreshold in flood-fill";
	prop_def  = "false";
	vect_data.clear();
	vect_data.push_back("false");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "searchNegativeExcess_default";
	prop_desc = "Default flag to search negative excess together with positive \nin compact source search";
	prop_def  = "false";
	vect_data.clear();
	vect_data.push_back("false");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "searchNestedSources_default";
	prop_desc = "Default flag to search for nested sources in compact source search.";
	prop_def  = "true";
	vect_data.clear();
	vect_data.push_back("true");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "nestedBlobThrFactor_default";
	prop_desc = "Default Threshold (in multiple of curvature RMS) to be used \nto detect nested blobs";
	prop_def  = "1";
	vect_data.clear();
	vect_data.push_back("1");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "searchCompactSources_default";
	prop_desc = "Default flag to enable/disable search of compact sources";
	prop_def  = "true";
	vect_data.clear();
	vect_data.push_back("true");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
}

//--------------------------------------------------------
/**
 *	Method      : SFinderClass::write_class_property()
 *	Description : Set class description fields as property in database
 */
//--------------------------------------------------------
void SFinderClass::write_class_property()
{
	//	First time, check if database used
	if (Tango::Util::_UseDb == false)
		return;

	Tango::DbData	data;
	string	classname = get_name();
	string	header;
	string::size_type	start, end;

	//	Put title
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("Source finder worker");
	title << str_title;
	data.push_back(title);

	//	Put Description
	Tango::DbDatum	description("Description");
	vector<string>	str_desc;
	str_desc.push_back("Device server for source finding.");
	description << str_desc;
	data.push_back(description);

	//	put cvs or svn location
	string	filename("SFinder");
	filename += "Class.cpp";

	// check for cvs information
	string	src_path(CvsPath);
	start = src_path.find("/");
	if (start!=string::npos)
	{
		end   = src_path.find(filename);
		if (end>start)
		{
			string	strloc = src_path.substr(start, end-start);
			//	Check if specific repository
			start = strloc.find("/cvsroot/");
			if (start!=string::npos && start>0)
			{
				string	repository = strloc.substr(0, start);
				if (repository.find("/segfs/")!=string::npos)
					strloc = "ESRF:" + strloc.substr(start, strloc.length()-start);
			}
			Tango::DbDatum	cvs_loc("cvs_location");
			cvs_loc << strloc;
			data.push_back(cvs_loc);
		}
	}

	// check for svn information
	else
	{
		string	src_path(SvnPath);
		start = src_path.find("://");
		if (start!=string::npos)
		{
			end = src_path.find(filename);
			if (end>start)
			{
				header = "$HeadURL: ";
				start = header.length();
				string	strloc = src_path.substr(start, (end-start));
				
				Tango::DbDatum	svn_loc("svn_location");
				svn_loc << strloc;
				data.push_back(svn_loc);
			}
		}
	}

	//	Get CVS or SVN revision tag
	
	// CVS tag
	string	tagname(TagName);
	header = "$Name: ";
	start = header.length();
	string	endstr(" $");
	
	end   = tagname.find(endstr);
	if (end!=string::npos && end>start)
	{
		string	strtag = tagname.substr(start, end-start);
		Tango::DbDatum	cvs_tag("cvs_tag");
		cvs_tag << strtag;
		data.push_back(cvs_tag);
	}
	
	// SVN tag
	string	svnpath(SvnPath);
	header = "$HeadURL: ";
	start = header.length();
	
	end   = svnpath.find(endstr);
	if (end!=string::npos && end>start)
	{
		string	strloc = svnpath.substr(start, end-start);
		
		string tagstr ("/tags/");
		start = strloc.find(tagstr);
		if ( start!=string::npos )
		{
			start = start + tagstr.length();
			end   = strloc.find(filename);
			string	strtag = strloc.substr(start, end-start-1);
			
			Tango::DbDatum	svn_tag("svn_tag");
			svn_tag << strtag;
			data.push_back(svn_tag);
		}
	}

	//	Get URL location
	string	httpServ(HttpServer);
	if (httpServ.length()>0)
	{
		Tango::DbDatum	db_doc_url("doc_url");
		db_doc_url << httpServ;
		data.push_back(db_doc_url);
	}

	//  Put inheritance
	Tango::DbDatum	inher_datum("InheritedFrom");
	vector<string> inheritance;
	inheritance.push_back("TANGO_BASE_CLASS");
	inher_datum << inheritance;
	data.push_back(inher_datum);

	//	Call database and and values
	get_db_class()->put_property(data);
}

//===================================================================
//	Factory methods
//===================================================================

//--------------------------------------------------------
/**
 *	Method      : SFinderClass::device_factory()
 *	Description : Create the device object(s)
 *                and store them in the device list
 */
//--------------------------------------------------------
void SFinderClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{
	/*----- PROTECTED REGION ID(SFinderClass::device_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	SFinderClass::device_factory_before

	//	Create devices and add it into the device list
	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
		device_list.push_back(new SFinder(this, (*devlist_ptr)[i]));
	}

	//	Manage dynamic attributes if any
	erase_dynamic_attributes(devlist_ptr, get_class_attr()->get_attr_list());

	//	Export devices to the outside world
	for (unsigned long i=1 ; i<=devlist_ptr->length() ; i++)
	{
		//	Add dynamic attributes if any
		SFinder *dev = static_cast<SFinder *>(device_list[device_list.size()-i]);
		dev->add_dynamic_attributes();

		//	Check before if database used.
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(dev);
		else
			export_device(dev, dev->get_name().c_str());
	}

	/*----- PROTECTED REGION ID(SFinderClass::device_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	SFinderClass::device_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : SFinderClass::attribute_factory()
 *	Description : Create the attribute object(s)
 *                and store them in the attribute list
 */
//--------------------------------------------------------
void SFinderClass::attribute_factory(vector<Tango::Attr *> &att_list)
{
	/*----- PROTECTED REGION ID(SFinderClass::attribute_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	SFinderClass::attribute_factory_before
	//	Attribute : useLocalBkg
	useLocalBkgAttrib	*uselocalbkg = new useLocalBkgAttrib();
	Tango::UserDefaultAttrProp	uselocalbkg_prop;
	//	description	not set for useLocalBkg
	//	label	not set for useLocalBkg
	//	unit	not set for useLocalBkg
	//	standard_unit	not set for useLocalBkg
	//	display_unit	not set for useLocalBkg
	//	format	not set for useLocalBkg
	//	max_value	not set for useLocalBkg
	//	min_value	not set for useLocalBkg
	//	max_alarm	not set for useLocalBkg
	//	min_alarm	not set for useLocalBkg
	//	max_warning	not set for useLocalBkg
	//	min_warning	not set for useLocalBkg
	//	delta_t	not set for useLocalBkg
	//	delta_val	not set for useLocalBkg
	
	uselocalbkg->set_default_properties(uselocalbkg_prop);
	//	Not Polled
	uselocalbkg->set_disp_level(Tango::OPERATOR);
	uselocalbkg->set_memorized();
	uselocalbkg->set_memorized_init(true);
	att_list.push_back(uselocalbkg);

	//	Attribute : use2ndPassInLocalBkg
	use2ndPassInLocalBkgAttrib	*use2ndpassinlocalbkg = new use2ndPassInLocalBkgAttrib();
	Tango::UserDefaultAttrProp	use2ndpassinlocalbkg_prop;
	//	description	not set for use2ndPassInLocalBkg
	//	label	not set for use2ndPassInLocalBkg
	//	unit	not set for use2ndPassInLocalBkg
	//	standard_unit	not set for use2ndPassInLocalBkg
	//	display_unit	not set for use2ndPassInLocalBkg
	//	format	not set for use2ndPassInLocalBkg
	//	max_value	not set for use2ndPassInLocalBkg
	//	min_value	not set for use2ndPassInLocalBkg
	//	max_alarm	not set for use2ndPassInLocalBkg
	//	min_alarm	not set for use2ndPassInLocalBkg
	//	max_warning	not set for use2ndPassInLocalBkg
	//	min_warning	not set for use2ndPassInLocalBkg
	//	delta_t	not set for use2ndPassInLocalBkg
	//	delta_val	not set for use2ndPassInLocalBkg
	
	use2ndpassinlocalbkg->set_default_properties(use2ndpassinlocalbkg_prop);
	//	Not Polled
	use2ndpassinlocalbkg->set_disp_level(Tango::OPERATOR);
	use2ndpassinlocalbkg->set_memorized();
	use2ndpassinlocalbkg->set_memorized_init(true);
	att_list.push_back(use2ndpassinlocalbkg);

	//	Attribute : skipNegativePixels
	skipNegativePixelsAttrib	*skipnegativepixels = new skipNegativePixelsAttrib();
	Tango::UserDefaultAttrProp	skipnegativepixels_prop;
	skipnegativepixels_prop.set_description("Flag to skip/keep negative pixels when computing the image stats");
	//	label	not set for skipNegativePixels
	//	unit	not set for skipNegativePixels
	//	standard_unit	not set for skipNegativePixels
	//	display_unit	not set for skipNegativePixels
	//	format	not set for skipNegativePixels
	//	max_value	not set for skipNegativePixels
	//	min_value	not set for skipNegativePixels
	//	max_alarm	not set for skipNegativePixels
	//	min_alarm	not set for skipNegativePixels
	//	max_warning	not set for skipNegativePixels
	//	min_warning	not set for skipNegativePixels
	//	delta_t	not set for skipNegativePixels
	//	delta_val	not set for skipNegativePixels
	
	skipnegativepixels->set_default_properties(skipnegativepixels_prop);
	//	Not Polled
	skipnegativepixels->set_disp_level(Tango::OPERATOR);
	skipnegativepixels->set_memorized();
	skipnegativepixels->set_memorized_init(true);
	att_list.push_back(skipnegativepixels);

	//	Attribute : skipOutliersInLocalBkg
	skipOutliersInLocalBkgAttrib	*skipoutliersinlocalbkg = new skipOutliersInLocalBkgAttrib();
	Tango::UserDefaultAttrProp	skipoutliersinlocalbkg_prop;
	skipoutliersinlocalbkg_prop.set_description("Flag to enable/disable skipping outliers in local bkg computation");
	//	label	not set for skipOutliersInLocalBkg
	//	unit	not set for skipOutliersInLocalBkg
	//	standard_unit	not set for skipOutliersInLocalBkg
	//	display_unit	not set for skipOutliersInLocalBkg
	//	format	not set for skipOutliersInLocalBkg
	//	max_value	not set for skipOutliersInLocalBkg
	//	min_value	not set for skipOutliersInLocalBkg
	//	max_alarm	not set for skipOutliersInLocalBkg
	//	min_alarm	not set for skipOutliersInLocalBkg
	//	max_warning	not set for skipOutliersInLocalBkg
	//	min_warning	not set for skipOutliersInLocalBkg
	//	delta_t	not set for skipOutliersInLocalBkg
	//	delta_val	not set for skipOutliersInLocalBkg
	
	skipoutliersinlocalbkg->set_default_properties(skipoutliersinlocalbkg_prop);
	//	Not Polled
	skipoutliersinlocalbkg->set_disp_level(Tango::OPERATOR);
	skipoutliersinlocalbkg->set_memorized();
	skipoutliersinlocalbkg->set_memorized_init(true);
	att_list.push_back(skipoutliersinlocalbkg);

	//	Attribute : localBkgMethod
	localBkgMethodAttrib	*localbkgmethod = new localBkgMethodAttrib();
	Tango::UserDefaultAttrProp	localbkgmethod_prop;
	localbkgmethod_prop.set_description("Method used to compute local bkg (1=Grid, 2=Superpixel)");
	//	label	not set for localBkgMethod
	//	unit	not set for localBkgMethod
	//	standard_unit	not set for localBkgMethod
	//	display_unit	not set for localBkgMethod
	//	format	not set for localBkgMethod
	//	max_value	not set for localBkgMethod
	//	min_value	not set for localBkgMethod
	//	max_alarm	not set for localBkgMethod
	//	min_alarm	not set for localBkgMethod
	//	max_warning	not set for localBkgMethod
	//	min_warning	not set for localBkgMethod
	//	delta_t	not set for localBkgMethod
	//	delta_val	not set for localBkgMethod
	
	localbkgmethod->set_default_properties(localbkgmethod_prop);
	//	Not Polled
	localbkgmethod->set_disp_level(Tango::OPERATOR);
	localbkgmethod->set_memorized();
	localbkgmethod->set_memorized_init(true);
	att_list.push_back(localbkgmethod);

	//	Attribute : bkgEstimator
	bkgEstimatorAttrib	*bkgestimator = new bkgEstimatorAttrib();
	Tango::UserDefaultAttrProp	bkgestimator_prop;
	bkgestimator_prop.set_description("Estimator to be used to compute bkg \n(1=mean, 2=median, 3=biweight, 4=clipped median)");
	//	label	not set for bkgEstimator
	//	unit	not set for bkgEstimator
	//	standard_unit	not set for bkgEstimator
	//	display_unit	not set for bkgEstimator
	//	format	not set for bkgEstimator
	//	max_value	not set for bkgEstimator
	//	min_value	not set for bkgEstimator
	//	max_alarm	not set for bkgEstimator
	//	min_alarm	not set for bkgEstimator
	//	max_warning	not set for bkgEstimator
	//	min_warning	not set for bkgEstimator
	//	delta_t	not set for bkgEstimator
	//	delta_val	not set for bkgEstimator
	
	bkgestimator->set_default_properties(bkgestimator_prop);
	//	Not Polled
	bkgestimator->set_disp_level(Tango::OPERATOR);
	bkgestimator->set_memorized();
	bkgestimator->set_memorized_init(true);
	att_list.push_back(bkgestimator);

	//	Attribute : useBeamInfoInBkg
	useBeamInfoInBkgAttrib	*usebeaminfoinbkg = new useBeamInfoInBkgAttrib();
	Tango::UserDefaultAttrProp	usebeaminfoinbkg_prop;
	usebeaminfoinbkg_prop.set_description("Use beam information in bkg computation");
	//	label	not set for useBeamInfoInBkg
	//	unit	not set for useBeamInfoInBkg
	//	standard_unit	not set for useBeamInfoInBkg
	//	display_unit	not set for useBeamInfoInBkg
	//	format	not set for useBeamInfoInBkg
	//	max_value	not set for useBeamInfoInBkg
	//	min_value	not set for useBeamInfoInBkg
	//	max_alarm	not set for useBeamInfoInBkg
	//	min_alarm	not set for useBeamInfoInBkg
	//	max_warning	not set for useBeamInfoInBkg
	//	min_warning	not set for useBeamInfoInBkg
	//	delta_t	not set for useBeamInfoInBkg
	//	delta_val	not set for useBeamInfoInBkg
	
	usebeaminfoinbkg->set_default_properties(usebeaminfoinbkg_prop);
	//	Not Polled
	usebeaminfoinbkg->set_disp_level(Tango::OPERATOR);
	usebeaminfoinbkg->set_memorized();
	usebeaminfoinbkg->set_memorized_init(true);
	att_list.push_back(usebeaminfoinbkg);

	//	Attribute : localBkgBoxSizeX
	localBkgBoxSizeXAttrib	*localbkgboxsizex = new localBkgBoxSizeXAttrib();
	Tango::UserDefaultAttrProp	localbkgboxsizex_prop;
	localbkgboxsizex_prop.set_description("Box size X used for local bkg computation. If beam information is used, this corresponds to \na multiple of beam size (e.g. x10, 20, 30 typically), otherwise it corresponds to a fraction of \nimage size.");
	//	label	not set for localBkgBoxSizeX
	//	unit	not set for localBkgBoxSizeX
	//	standard_unit	not set for localBkgBoxSizeX
	//	display_unit	not set for localBkgBoxSizeX
	//	format	not set for localBkgBoxSizeX
	//	max_value	not set for localBkgBoxSizeX
	//	min_value	not set for localBkgBoxSizeX
	//	max_alarm	not set for localBkgBoxSizeX
	//	min_alarm	not set for localBkgBoxSizeX
	//	max_warning	not set for localBkgBoxSizeX
	//	min_warning	not set for localBkgBoxSizeX
	//	delta_t	not set for localBkgBoxSizeX
	//	delta_val	not set for localBkgBoxSizeX
	
	localbkgboxsizex->set_default_properties(localbkgboxsizex_prop);
	//	Not Polled
	localbkgboxsizex->set_disp_level(Tango::OPERATOR);
	localbkgboxsizex->set_memorized();
	localbkgboxsizex->set_memorized_init(true);
	att_list.push_back(localbkgboxsizex);

	//	Attribute : localBkgBoxSizeY
	localBkgBoxSizeYAttrib	*localbkgboxsizey = new localBkgBoxSizeYAttrib();
	Tango::UserDefaultAttrProp	localbkgboxsizey_prop;
	localbkgboxsizey_prop.set_description("Box size Y used for local bkg computation. If beam information is used, this corresponds to a\nmultiple of beam size (e.g. x10, 20, 30 typically), otherwise it corresponds to a fraction of \nimage size.");
	//	label	not set for localBkgBoxSizeY
	//	unit	not set for localBkgBoxSizeY
	//	standard_unit	not set for localBkgBoxSizeY
	//	display_unit	not set for localBkgBoxSizeY
	//	format	not set for localBkgBoxSizeY
	//	max_value	not set for localBkgBoxSizeY
	//	min_value	not set for localBkgBoxSizeY
	//	max_alarm	not set for localBkgBoxSizeY
	//	min_alarm	not set for localBkgBoxSizeY
	//	max_warning	not set for localBkgBoxSizeY
	//	min_warning	not set for localBkgBoxSizeY
	//	delta_t	not set for localBkgBoxSizeY
	//	delta_val	not set for localBkgBoxSizeY
	
	localbkgboxsizey->set_default_properties(localbkgboxsizey_prop);
	//	Not Polled
	localbkgboxsizey->set_disp_level(Tango::OPERATOR);
	localbkgboxsizey->set_memorized();
	localbkgboxsizey->set_memorized_init(true);
	att_list.push_back(localbkgboxsizey);

	//	Attribute : localBkgGridStepSizeX
	localBkgGridStepSizeXAttrib	*localbkggridstepsizex = new localBkgGridStepSizeXAttrib();
	Tango::UserDefaultAttrProp	localbkggridstepsizex_prop;
	localbkggridstepsizex_prop.set_description("Grid step size X used in local bkg computation. This corresponds to a fraction of the box \nsize X (e.g. 0.2, 0.5 are typical values)");
	//	label	not set for localBkgGridStepSizeX
	//	unit	not set for localBkgGridStepSizeX
	//	standard_unit	not set for localBkgGridStepSizeX
	//	display_unit	not set for localBkgGridStepSizeX
	//	format	not set for localBkgGridStepSizeX
	//	max_value	not set for localBkgGridStepSizeX
	//	min_value	not set for localBkgGridStepSizeX
	//	max_alarm	not set for localBkgGridStepSizeX
	//	min_alarm	not set for localBkgGridStepSizeX
	//	max_warning	not set for localBkgGridStepSizeX
	//	min_warning	not set for localBkgGridStepSizeX
	//	delta_t	not set for localBkgGridStepSizeX
	//	delta_val	not set for localBkgGridStepSizeX
	
	localbkggridstepsizex->set_default_properties(localbkggridstepsizex_prop);
	//	Not Polled
	localbkggridstepsizex->set_disp_level(Tango::OPERATOR);
	localbkggridstepsizex->set_memorized();
	localbkggridstepsizex->set_memorized_init(true);
	att_list.push_back(localbkggridstepsizex);

	//	Attribute : localBkgGridStepSizeY
	localBkgGridStepSizeYAttrib	*localbkggridstepsizey = new localBkgGridStepSizeYAttrib();
	Tango::UserDefaultAttrProp	localbkggridstepsizey_prop;
	localbkggridstepsizey_prop.set_description("Grid step size Y used in local bkg computation. This corresponds to a fraction of the box size Y \n(e.g. 0.2, 0.5 are typical values)");
	//	label	not set for localBkgGridStepSizeY
	//	unit	not set for localBkgGridStepSizeY
	//	standard_unit	not set for localBkgGridStepSizeY
	//	display_unit	not set for localBkgGridStepSizeY
	//	format	not set for localBkgGridStepSizeY
	//	max_value	not set for localBkgGridStepSizeY
	//	min_value	not set for localBkgGridStepSizeY
	//	max_alarm	not set for localBkgGridStepSizeY
	//	min_alarm	not set for localBkgGridStepSizeY
	//	max_warning	not set for localBkgGridStepSizeY
	//	min_warning	not set for localBkgGridStepSizeY
	//	delta_t	not set for localBkgGridStepSizeY
	//	delta_val	not set for localBkgGridStepSizeY
	
	localbkggridstepsizey->set_default_properties(localbkggridstepsizey_prop);
	//	Not Polled
	localbkggridstepsizey->set_disp_level(Tango::OPERATOR);
	localbkggridstepsizey->set_memorized();
	localbkggridstepsizey->set_memorized_init(true);
	att_list.push_back(localbkggridstepsizey);

	//	Attribute : seedThr
	seedThrAttrib	*seedthr = new seedThrAttrib();
	Tango::UserDefaultAttrProp	seedthr_prop;
	seedthr_prop.set_description("Seed threshold (in number of sigmas above significance level) to be used in source \nfinding (flood-fill).");
	//	label	not set for seedThr
	//	unit	not set for seedThr
	//	standard_unit	not set for seedThr
	//	display_unit	not set for seedThr
	//	format	not set for seedThr
	//	max_value	not set for seedThr
	//	min_value	not set for seedThr
	//	max_alarm	not set for seedThr
	//	min_alarm	not set for seedThr
	//	max_warning	not set for seedThr
	//	min_warning	not set for seedThr
	//	delta_t	not set for seedThr
	//	delta_val	not set for seedThr
	
	seedthr->set_default_properties(seedthr_prop);
	//	Not Polled
	seedthr->set_disp_level(Tango::OPERATOR);
	seedthr->set_memorized();
	seedthr->set_memorized_init(true);
	att_list.push_back(seedthr);

	//	Attribute : mergeThr
	mergeThrAttrib	*mergethr = new mergeThrAttrib();
	Tango::UserDefaultAttrProp	mergethr_prop;
	mergethr_prop.set_description("Merge threshold (in number of sigmas above significance level) to be used in source \nfinding (flood-fill).");
	//	label	not set for mergeThr
	//	unit	not set for mergeThr
	//	standard_unit	not set for mergeThr
	//	display_unit	not set for mergeThr
	//	format	not set for mergeThr
	//	max_value	not set for mergeThr
	//	min_value	not set for mergeThr
	//	max_alarm	not set for mergeThr
	//	min_alarm	not set for mergeThr
	//	max_warning	not set for mergeThr
	//	min_warning	not set for mergeThr
	//	delta_t	not set for mergeThr
	//	delta_val	not set for mergeThr
	
	mergethr->set_default_properties(mergethr_prop);
	//	Not Polled
	mergethr->set_disp_level(Tango::OPERATOR);
	mergethr->set_memorized();
	mergethr->set_memorized_init(true);
	att_list.push_back(mergethr);

	//	Attribute : minNPix
	minNPixAttrib	*minnpix = new minNPixAttrib();
	Tango::UserDefaultAttrProp	minnpix_prop;
	minnpix_prop.set_description("Minimum number of pixels in source fnding (blob size in flood-fill).");
	//	label	not set for minNPix
	//	unit	not set for minNPix
	//	standard_unit	not set for minNPix
	//	display_unit	not set for minNPix
	//	format	not set for minNPix
	//	max_value	not set for minNPix
	//	min_value	not set for minNPix
	//	max_alarm	not set for minNPix
	//	min_alarm	not set for minNPix
	//	max_warning	not set for minNPix
	//	min_warning	not set for minNPix
	//	delta_t	not set for minNPix
	//	delta_val	not set for minNPix
	
	minnpix->set_default_properties(minnpix_prop);
	//	Not Polled
	minnpix->set_disp_level(Tango::OPERATOR);
	minnpix->set_memorized();
	minnpix->set_memorized_init(true);
	att_list.push_back(minnpix);

	//	Attribute : mergeBelowSeed
	mergeBelowSeedAttrib	*mergebelowseed = new mergeBelowSeedAttrib();
	Tango::UserDefaultAttrProp	mergebelowseed_prop;
	mergebelowseed_prop.set_description("Flag value to aggregate only pixels below seed threshold in flood-fill");
	//	label	not set for mergeBelowSeed
	//	unit	not set for mergeBelowSeed
	//	standard_unit	not set for mergeBelowSeed
	//	display_unit	not set for mergeBelowSeed
	//	format	not set for mergeBelowSeed
	//	max_value	not set for mergeBelowSeed
	//	min_value	not set for mergeBelowSeed
	//	max_alarm	not set for mergeBelowSeed
	//	min_alarm	not set for mergeBelowSeed
	//	max_warning	not set for mergeBelowSeed
	//	min_warning	not set for mergeBelowSeed
	//	delta_t	not set for mergeBelowSeed
	//	delta_val	not set for mergeBelowSeed
	
	mergebelowseed->set_default_properties(mergebelowseed_prop);
	//	Not Polled
	mergebelowseed->set_disp_level(Tango::OPERATOR);
	mergebelowseed->set_memorized();
	mergebelowseed->set_memorized_init(true);
	att_list.push_back(mergebelowseed);

	//	Attribute : searchNegativeExcess
	searchNegativeExcessAttrib	*searchnegativeexcess = new searchNegativeExcessAttrib();
	Tango::UserDefaultAttrProp	searchnegativeexcess_prop;
	searchnegativeexcess_prop.set_description("Flag to search negative excess together with positive in compact source search");
	//	label	not set for searchNegativeExcess
	//	unit	not set for searchNegativeExcess
	//	standard_unit	not set for searchNegativeExcess
	//	display_unit	not set for searchNegativeExcess
	//	format	not set for searchNegativeExcess
	//	max_value	not set for searchNegativeExcess
	//	min_value	not set for searchNegativeExcess
	//	max_alarm	not set for searchNegativeExcess
	//	min_alarm	not set for searchNegativeExcess
	//	max_warning	not set for searchNegativeExcess
	//	min_warning	not set for searchNegativeExcess
	//	delta_t	not set for searchNegativeExcess
	//	delta_val	not set for searchNegativeExcess
	
	searchnegativeexcess->set_default_properties(searchnegativeexcess_prop);
	//	Not Polled
	searchnegativeexcess->set_disp_level(Tango::OPERATOR);
	searchnegativeexcess->set_memorized();
	searchnegativeexcess->set_memorized_init(true);
	att_list.push_back(searchnegativeexcess);

	//	Attribute : nestedBlobThrFactor
	nestedBlobThrFactorAttrib	*nestedblobthrfactor = new nestedBlobThrFactorAttrib();
	Tango::UserDefaultAttrProp	nestedblobthrfactor_prop;
	nestedblobthrfactor_prop.set_description("Threshold (in multiple of curvature RMS) to be used to detect nested blobs");
	//	label	not set for nestedBlobThrFactor
	//	unit	not set for nestedBlobThrFactor
	//	standard_unit	not set for nestedBlobThrFactor
	//	display_unit	not set for nestedBlobThrFactor
	//	format	not set for nestedBlobThrFactor
	//	max_value	not set for nestedBlobThrFactor
	//	min_value	not set for nestedBlobThrFactor
	//	max_alarm	not set for nestedBlobThrFactor
	//	min_alarm	not set for nestedBlobThrFactor
	//	max_warning	not set for nestedBlobThrFactor
	//	min_warning	not set for nestedBlobThrFactor
	//	delta_t	not set for nestedBlobThrFactor
	//	delta_val	not set for nestedBlobThrFactor
	
	nestedblobthrfactor->set_default_properties(nestedblobthrfactor_prop);
	//	Not Polled
	nestedblobthrfactor->set_disp_level(Tango::OPERATOR);
	nestedblobthrfactor->set_memorized();
	nestedblobthrfactor->set_memorized_init(true);
	att_list.push_back(nestedblobthrfactor);

	//	Attribute : searchCompactSources
	searchCompactSourcesAttrib	*searchcompactsources = new searchCompactSourcesAttrib();
	Tango::UserDefaultAttrProp	searchcompactsources_prop;
	searchcompactsources_prop.set_description("Flag to enable/disable search of compact sources");
	//	label	not set for searchCompactSources
	//	unit	not set for searchCompactSources
	//	standard_unit	not set for searchCompactSources
	//	display_unit	not set for searchCompactSources
	//	format	not set for searchCompactSources
	//	max_value	not set for searchCompactSources
	//	min_value	not set for searchCompactSources
	//	max_alarm	not set for searchCompactSources
	//	min_alarm	not set for searchCompactSources
	//	max_warning	not set for searchCompactSources
	//	min_warning	not set for searchCompactSources
	//	delta_t	not set for searchCompactSources
	//	delta_val	not set for searchCompactSources
	
	searchcompactsources->set_default_properties(searchcompactsources_prop);
	//	Not Polled
	searchcompactsources->set_disp_level(Tango::OPERATOR);
	searchcompactsources->set_memorized();
	searchcompactsources->set_memorized_init(true);
	att_list.push_back(searchcompactsources);


	//	Create a list of static attributes
	create_static_attribute_list(get_class_attr()->get_attr_list());
	/*----- PROTECTED REGION ID(SFinderClass::attribute_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	SFinderClass::attribute_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : SFinderClass::pipe_factory()
 *	Description : Create the pipe object(s)
 *                and store them in the pipe list
 */
//--------------------------------------------------------
void SFinderClass::pipe_factory()
{
	/*----- PROTECTED REGION ID(SFinderClass::pipe_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	SFinderClass::pipe_factory_before
	/*----- PROTECTED REGION ID(SFinderClass::pipe_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	SFinderClass::pipe_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : SFinderClass::command_factory()
 *	Description : Create the command object(s)
 *                and store them in the command list
 */
//--------------------------------------------------------
void SFinderClass::command_factory()
{
	/*----- PROTECTED REGION ID(SFinderClass::command_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	SFinderClass::command_factory_before


	//	Command ExtractSources
	ExtractSourcesClass	*pExtractSourcesCmd =
		new ExtractSourcesClass("ExtractSources",
			Tango::DEVVAR_LONGSTRINGARRAY, Tango::DEVVAR_LONGSTRINGARRAY,
			"String arg\n[0]: filename \n\nLong arg\n[nmaps+0]: tile min x\n[nmaps+1]: tile max x\n[nmaps+2]: tile min y\n[nmaps+3]: tile max y",
			"Long arg\n[0]: ack code\n\nString arg\n[0]: Encoded sources found\n[1]: err description",
			Tango::OPERATOR);
	command_list.push_back(pExtractSourcesCmd);

	/*----- PROTECTED REGION ID(SFinderClass::command_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	SFinderClass::command_factory_after
}

//===================================================================
//	Dynamic attributes related methods
//===================================================================

//--------------------------------------------------------
/**
 * method : 		SFinderClass::create_static_attribute_list
 * description : 	Create the a list of static attributes
 *
 * @param	att_list	the ceated attribute list
 */
//--------------------------------------------------------
void SFinderClass::create_static_attribute_list(vector<Tango::Attr *> &att_list)
{
	for (unsigned long i=0 ; i<att_list.size() ; i++)
	{
		string att_name(att_list[i]->get_name());
		transform(att_name.begin(), att_name.end(), att_name.begin(), ::tolower);
		defaultAttList.push_back(att_name);
	}

	cout2 << defaultAttList.size() << " attributes in default list" << endl;

	/*----- PROTECTED REGION ID(SFinderClass::create_static_att_list) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SFinderClass::create_static_att_list
}


//--------------------------------------------------------
/**
 * method : 		SFinderClass::erase_dynamic_attributes
 * description : 	delete the dynamic attributes if any.
 *
 * @param	devlist_ptr	the device list pointer
 * @param	list of all attributes
 */
//--------------------------------------------------------
void SFinderClass::erase_dynamic_attributes(const Tango::DevVarStringArray *devlist_ptr, vector<Tango::Attr *> &att_list)
{
	Tango::Util *tg = Tango::Util::instance();

	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		Tango::DeviceImpl *dev_impl = tg->get_device_by_name(((string)(*devlist_ptr)[i]).c_str());
		SFinder *dev = static_cast<SFinder *> (dev_impl);

		vector<Tango::Attribute *> &dev_att_list = dev->get_device_attr()->get_attribute_list();
		vector<Tango::Attribute *>::iterator ite_att;
		for (ite_att=dev_att_list.begin() ; ite_att != dev_att_list.end() ; ++ite_att)
		{
			string att_name((*ite_att)->get_name_lower());
			if ((att_name == "state") || (att_name == "status"))
				continue;
			vector<string>::iterator ite_str = find(defaultAttList.begin(), defaultAttList.end(), att_name);
			if (ite_str == defaultAttList.end())
			{
				cout2 << att_name << " is a UNWANTED dynamic attribute for device " << (*devlist_ptr)[i] << endl;
				Tango::Attribute &att = dev->get_device_attr()->get_attr_by_name(att_name.c_str());
				dev->remove_attribute(att_list[att.get_attr_idx()], true, false);
				--ite_att;
			}
		}
	}
	/*----- PROTECTED REGION ID(SFinderClass::erase_dynamic_attributes) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	SFinderClass::erase_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Method      : SFinderClass::get_attr_by_name()
 *	Description : returns Tango::Attr * object found by name
 */
//--------------------------------------------------------
Tango::Attr *SFinderClass::get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname)
{
	vector<Tango::Attr *>::iterator it;
	for (it=att_list.begin() ; it<att_list.end() ; ++it)
		if ((*it)->get_name()==attname)
			return (*it);
	//	Attr does not exist
	return NULL;
}


/*----- PROTECTED REGION ID(SFinderClass::Additional Methods) ENABLED START -----*/

/*----- PROTECTED REGION END -----*/	//	SFinderClass::Additional Methods
} //	namespace
